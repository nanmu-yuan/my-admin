{
	"compilerOptions": {
		"allowJs": true,//允许编辑器编译js jsx文件
        "checkJs":true,//在 .js文件中报告错误。与allowJs配合使用。
		"allowSyntheticDefaultImports": true,//允许从没有设置默认导出的模块中默认导入
		"allowUnreachableCode": true,//不报告执行不到的代码错误。
		"allowUnusedLabels": true,//不报告未使用的标签错误
		"baseUrl": "./", // 解析非相对模块的基地址，默认是当前目录
		"esModuleInterop": true,//允许module.exports=xxx 导出，由import from 导入.因为很多老的js库使用了commonjs的导出方式，并且没有导出default属性
		"experimentalDecorators": true,//启用实验性的ES装饰器
		"jsx": "react",//在 `.tsx`文件里支持JSX： `"React"`
		"paths": {// 模块名到基于 baseUrl的路径映射的列表
			"@/*": ["./src/*"]//用于提示@别名映射在src下的文件名称
		},
		"lib": ["esnext", "dom"],//TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array",
		"module": "esnext",//设置程序的模块系统
		"moduleResolution": "node",//模块解析策略。默认使用node的模块解析策略
		"noImplicitAny": false,// 不允许隐式的any类型,在表达式和声明上有隐含的 any类型时报错
		"resolveJsonModule": true,//允许导入扩展名为“.json”的模块
		"strict": true,//启用所有严格类型检查选项。启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks和 --strictFunctionTypes和--strictPropertyInitialization
		"strictNullChecks": true,// 不允许把null、undefined赋值给其他类型的变量.在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）
		"target": "esnext",//指定ECMAScript目标版本
		"skipLibCheck": true,
	},
	"include": ["src"],//包含的文件
	"exclude": ["node_modules"]
}
